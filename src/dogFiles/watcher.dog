bool connWatcher(const char* host, int port) {
    if (dogClient.connect(host, port)) {
        Log.notice("[WatcherClient] Connected to %s:%d\n", host, port);
        return true;
    } else {
        Log.warning("[WatcherClient] Can't connect to %s:%d\n", host, port);
        return false;
    }
}

void updateWatcherConn(void) {
    watchercooldown = millis() + 5000;
    isWatcherConnected = dogClient.connected();
    if (!isWatcherConnected) {
        isWatcherConnected = connWatcher(watchdogServer, watchdogPort);
    }
}

bool checkAccess(const char* uid, int door) {
    String jsonData = "";
    jsonData += "{'type':3 ,'doorId':";
    jsonData += door;
    jsonData += ",'uid':'";
    jsonData += uid;
    jsonData += "'};";

    dogClient.print(jsonData);

    String readIn;
    readIn = dogClient.readStringUntil(';');

    Log.verbose("%s\n", readIn.c_str());
    DynamicJsonDocument readJson(1024);
    deserializeJson(readJson, readIn);

    String reply = readJson["reply"];

    DynamicJsonDocument replyJson(1024);
    deserializeJson(replyJson, reply);

    String name = replyJson["name"];

    Log.trace("[User] %s access %s\n", name.c_str(),
              replyJson["open"] ? "granted" : "denied");

    return replyJson["open"];
}

void handleWatchDogServerRequest(String readIn) {
    Log.verbose("[dogClient] %s\n", readIn.c_str());
    DynamicJsonDocument readJson(1024);
    deserializeJson(readJson, readIn);

    int type = readJson["type"];
    switch (type) {
        case W_PING:
            String reply = "{'type':";
            reply += W_PONG;
            reply += "};";
            break;
    }
    dogClient.print(reply);
}