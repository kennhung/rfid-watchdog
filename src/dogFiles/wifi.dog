void updateWifiStatus() {
    wifiCheckCooldown = millis() + 10000;
    if (inStationMode) {
        if (WiFi.status() == WL_CONNECTED) {
            isWifiConnected = true;
        } else {
            Log.warning("[WIFI] connection broke\n");
            WiFi.printDiag(Serial);
            isWifiConnected = false;
        }
    } else if (inAPMode) {
        if (connectedStationCount != WiFi.softAPgetStationNum()) {
            Log.notice("[WiFI] current %d station connected to soft-ap\n",
                       WiFi.softAPgetStationNum());
            connectedStationCount = WiFi.softAPgetStationNum();
        }
    }
}

void wifiLedOn() {
    if (wifipin != 255) digitalWrite(wifipin, LEDon);
}

void wifiLedOff() {
    if (wifipin != 255) digitalWrite(wifipin, LEDoff);
}

bool ICACHE_FLASH_ATTR startAP(int hid, const char *ssid,
                               const char *password = NULL) {
    inAPMode = true;
    WiFi.mode(WIFI_AP);
    Log.notice("[WIFI] Configuring access point...\n");

    bool success;
    if (hid == 1) {
        success = WiFi.softAP(ssid, password, 3, true);
    } else {
        success = WiFi.softAP(ssid, password);
    }
    Log.notice("%s\n", success ? "Ready" : "Failed!");

    if (!success) {
        ESP.restart();
    }

    IPAddress myIP = WiFi.softAPIP();
    Log.notice("[WIFI] AP IP address: %s\n", myIP.toString().c_str());
    Log.notice("[WIFI] AP SSID: %s\n", ssid);

    isWifiConnected = success;
    return success;
}

// Fallback to AP Mode, so we can connect to ESP if there is no Internet
// connection
void ICACHE_FLASH_ATTR fallbacktoAPMode() {
    inAPMode = true;
    Log.notice("ESP-RFID is running in Fallback AP Mode\n");
    uint8_t macAddr[6];

    WiFi.softAPmacAddress(macAddr);

    char ssid[15];
    sprintf(ssid, "ESP-RFID-%02x%02x%02x", macAddr[3], macAddr[4], macAddr[5]);

    WiFi.mode(WIFI_AP);
    bool success;
    success = WiFi.softAP(ssid);
    isWifiConnected = success;
    if (success) {
        wifiLedOn();
    }
}

bool ICACHE_FLASH_ATTR connectSTA(const char *ssid, const char *password) {
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, password, 0);

    // TODO add bssid
    Log.notice("[WIFI] Trying to connect WiFi: %s", ssid);
    unsigned long now = millis();
    uint8_t timeout = 30;  // define when to time out in seconds
    do {
        if (WiFi.status() == WL_CONNECTED) {
            break;
        }
        delay(500);
#ifdef DEBUG
        Serial.print(F("."));
#endif
    } while (millis() - now < timeout * 1000);

#ifdef DEBUG
    Serial.println();
#endif

    if (WiFi.status() == WL_CONNECTED) {
        Log.notice("[WIFI] Client IP address: %s\n",
                   WiFi.localIP().toString().c_str());
        isWifiConnected = true;
        WiFi.setAutoReconnect(true);

        String data = ssid;
        data += " " + WiFi.localIP().toString();
        inStationMode = true;
        return true;
    } else {
        Log.error("[WIFI] Couldn't connect in time\n");
        return false;
    }
}