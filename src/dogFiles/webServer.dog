#include "webPages/index.h"
#include "webPages/config.h"
#include "webPages/cache.h"

bool handleAuth(AsyncWebServerRequest *req) {
    if (!req->authenticate("root", adminPsw)) {
        req->requestAuthentication();
        return false;
    } else {
        return true;
    }
}

void ICACHE_FLASH_ATTR setupWebServer() {
    server.onNotFound([](AsyncWebServerRequest *request) {
        AsyncWebServerResponse *response =
            request->beginResponse(404, "text/plain", "Not found");
        request->send(response);
    });

    server.on("/config/get", HTTP_GET, [](AsyncWebServerRequest *req) {
        if (!handleAuth(req)) return;
        File configFile = SPIFFS.open("/config.json", "r");
        if (configFile) {
            size_t size = configFile.size();
            std::unique_ptr<char[]> buf(new char[size]);
            configFile.readBytes(buf.get(), size);
            DynamicJsonDocument json(1024);
            DeserializationError jsonerror = deserializeJson(json, buf.get());
            configFile.close();
            if (jsonerror) {
                req->send(500, "text/plain", "jsonerror");
            } else {
                String out = "";
                serializeJson(json, out);
                req->send(200, "application/json", out);
            }
        } else {
            req->send(500, "text/plain", "Failed to open config file");
        }
    });

    server.on("/config/save", HTTP_POST, [](AsyncWebServerRequest *req) {
        if (!handleAuth(req)) return;
        if (req->hasParam("config", true)) {
            String configStr = req->getParam("config", true)->value();
            File f = SPIFFS.open("/config.json", "w+");
            if (f) {
                int len = configStr.length();
                for (int i = 0; i < len; i++) {
                    f.print(configStr.c_str()[i]);
                }
                f.close();
                Log.notice("Config stored in the SPIFFS %d bytes\n", len);
                req->send(200, "text/plain", "Config saved!");
                shouldReboot = true;
                req->redirect("/");
            } else {
                req->send(500, "text/plain", "Failed to open config file");
            }
        } else {
            req->send(400);
        }
    });

    server.on("/info/version", HTTP_GET, [](AsyncWebServerRequest *req) {
        if (!handleAuth(req)) return;
        req->send(200, "text/plain", verTag);
    });

    server.on("/cache/list", HTTP_GET, [](AsyncWebServerRequest *req) {
        if (!handleAuth(req)) return;
        String caches = getCacheList();
        req->send(200, "text/plain", caches);
    });

    server.on("/index.html", HTTP_GET, [](AsyncWebServerRequest *request) {
        if (!handleAuth(request)) return;
        AsyncWebServerResponse *response =
            request->beginResponse_P(200, "text/html", index_html);
        request->send(response);
    });

    server.on("/config.html", HTTP_GET, [](AsyncWebServerRequest *request) {
        if (!handleAuth(request)) return;
        AsyncWebServerResponse *response =
            request->beginResponse_P(200, "text/html", config_html);
        request->send(response);
    });

    server.on("/cache.html", HTTP_GET, [](AsyncWebServerRequest *request) {
        if (!handleAuth(request)) return;
        AsyncWebServerResponse *response =
            request->beginResponse_P(200, "text/html", cache_html);
        request->send(response);
    });

    server.rewrite("/", "/index.html");
    server.begin();
}