bool loadConfig(void) {
    File configFile = SPIFFS.open("/config.json", "r");

    if (!configFile) {
        Log.warning("[FILE] Failed to open config file\n");
        return false;
    }

    size_t size = configFile.size();
    std::unique_ptr<char[]> buf(new char[size]);
    configFile.readBytes(buf.get(), size);
    DynamicJsonDocument json(1024);
    DeserializationError jsonerror = deserializeJson(json, buf.get());
    if (jsonerror) {
        return false;
    }

    Log.notice("Config file found");
    // json.prettyPrintTo(Serial);
    Serial.println();

    JsonObject network = json["network"];
    JsonObject hardware = json["hardware"];
    JsonObject general = json["general"];
    JsonObject ntp = json["ntp"];
    JsonObject watchdog = json["watchdog"];

    if (hardware.containsKey("wifipin")) {
        wifipin = hardware["wifipin"];
        if (wifipin != 255) {
            pinMode(wifipin, OUTPUT);
            digitalWrite(wifipin, LEDoff);
        }
    }

    if (hardware.containsKey("buttonpin")) {
        buttonPin = hardware["buttonpin"];
    }

    // set up door relay
    relayPin = hardware["rpin"];
    relayType = hardware["rtype"];
    if (hardware.containsKey("rtime")) {
        relayActiveTime = hardware["rtime"];
    }
    
    pinMode(relayPin, OUTPUT);
    digitalWrite(relayPin, !relayType);

    autoRestartIntervalSeconds = general["restart"];
    wifiTimeout = network["offtime"];
    const char *bssidmac = network["bssid"];
    byte bssid[6];
    parseBytes(bssidmac, ':', bssid, 6, 16);
    deviceHostname = strdup(general["hostnm"]);
    WiFi.hostname(deviceHostname);

    // if (!MDNS.begin(deviceHostname)) {
    //     Log.warning("Error setting up MDNS responder!");
    // }
    // MDNS.addService("http", "tcp", 80);

    // set up rfid part
    int ssPing = hardware["sspin"];
    int rfidGain = hardware["rfidgain"];
    setupMFRC522Reader(ssPing, rfidGain);

    const char *ssid = network["ssid"];
    const char *password = network["pswd"];
    if (network["dhcp"] == "0") {
        WiFi.mode(WIFI_STA);
        const char *clientipch = network["ip"];
        const char *subnetch = network["subnet"];
        const char *gatewaych = network["gateway"];
        const char *dnsch = network["dns"];
        IPAddress clientip;
        IPAddress subnet;
        IPAddress gateway;
        IPAddress dns;
        clientip.fromString(clientipch);
        subnet.fromString(subnetch);
        gateway.fromString(gatewaych);
        dns.fromString(dnsch);
        WiFi.config(clientip, gateway, subnet, dns);
    }

    if (!connectSTA(ssid, password)) {
        return false;
    }

    const char *ntpserver = ntp["server"];
    int ntpinter = ntp["interval"];
    timeZone = ntp["timezone"];
    
    watchdogServer = strdup(watchdog["server"]);
    watchdogPort = watchdog["port"];
    doorId = watchdog["doorId"];

    return true;
}